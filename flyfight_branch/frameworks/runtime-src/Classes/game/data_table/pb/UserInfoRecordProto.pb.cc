// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserInfoRecordProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UserInfoRecordProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* UserInfoRecordProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfoRecordProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_UserInfoRecordProto_2eproto() {
  protobuf_AddDesc_UserInfoRecordProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "UserInfoRecordProto.proto");
  GOOGLE_CHECK(file != NULL);
  UserInfoRecordProto_descriptor_ = file->message_type(0);
  static const int UserInfoRecordProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoRecordProto, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoRecordProto, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoRecordProto, currentfighterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoRecordProto, unitattr_),
  };
  UserInfoRecordProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfoRecordProto_descriptor_,
      UserInfoRecordProto::default_instance_,
      UserInfoRecordProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoRecordProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoRecordProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfoRecordProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_UserInfoRecordProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfoRecordProto_descriptor_, &UserInfoRecordProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_UserInfoRecordProto_2eproto() {
  delete UserInfoRecordProto::default_instance_;
  delete UserInfoRecordProto_reflection_;
  delete UserInfoRecordProto::_default_username_;
}

void protobuf_AddDesc_UserInfoRecordProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_BaseAttrProto_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031UserInfoRecordProto.proto\032\023BaseAttrPro"
    "to.proto\"|\n\023UserInfoRecordProto\022\021\n\006userI"
    "D\030\001 \002(\005:\0010\022\023\n\010userName\030\002 \002(\t:\001T\022\033\n\020curre"
    "ntFighterID\030\003 \002(\005:\0010\022 \n\010unitAttr\030\004 \003(\0132\016"
    ".BaseAttrProto", 174);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UserInfoRecordProto.proto", &protobuf_RegisterTypes);
  UserInfoRecordProto::_default_username_ =
      new ::std::string("T", 1);
  UserInfoRecordProto::default_instance_ = new UserInfoRecordProto();
  UserInfoRecordProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UserInfoRecordProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UserInfoRecordProto_2eproto {
  StaticDescriptorInitializer_UserInfoRecordProto_2eproto() {
    protobuf_AddDesc_UserInfoRecordProto_2eproto();
  }
} static_descriptor_initializer_UserInfoRecordProto_2eproto_;

// ===================================================================

::std::string* UserInfoRecordProto::_default_username_ = NULL;
#ifndef _MSC_VER
const int UserInfoRecordProto::kUserIDFieldNumber;
const int UserInfoRecordProto::kUserNameFieldNumber;
const int UserInfoRecordProto::kCurrentFighterIDFieldNumber;
const int UserInfoRecordProto::kUnitAttrFieldNumber;
#endif  // !_MSC_VER

UserInfoRecordProto::UserInfoRecordProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserInfoRecordProto::InitAsDefaultInstance() {
}

UserInfoRecordProto::UserInfoRecordProto(const UserInfoRecordProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserInfoRecordProto::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  username_ = const_cast< ::std::string*>(_default_username_);
  currentfighterid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfoRecordProto::~UserInfoRecordProto() {
  SharedDtor();
}

void UserInfoRecordProto::SharedDtor() {
  if (username_ != _default_username_) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void UserInfoRecordProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfoRecordProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfoRecordProto_descriptor_;
}

const UserInfoRecordProto& UserInfoRecordProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserInfoRecordProto_2eproto();
  return *default_instance_;
}

UserInfoRecordProto* UserInfoRecordProto::default_instance_ = NULL;

UserInfoRecordProto* UserInfoRecordProto::New() const {
  return new UserInfoRecordProto;
}

void UserInfoRecordProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    if (has_username()) {
      if (username_ != _default_username_) {
        username_->assign(*_default_username_);
      }
    }
    currentfighterid_ = 0;
  }
  unitattr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfoRecordProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userName;
        break;
      }

      // required string userName = 2 [default = "T"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_currentFighterID;
        break;
      }

      // required int32 currentFighterID = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentFighterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentfighterid_)));
          set_has_currentfighterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_unitAttr;
        break;
      }

      // repeated .BaseAttrProto unitAttr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unitattr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_unitAttr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInfoRecordProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 userID = 1 [default = 0];
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // required string userName = 2 [default = "T"];
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }

  // required int32 currentFighterID = 3 [default = 0];
  if (has_currentfighterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->currentfighterid(), output);
  }

  // repeated .BaseAttrProto unitAttr = 4;
  for (int i = 0; i < this->unitattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->unitattr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserInfoRecordProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 userID = 1 [default = 0];
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // required string userName = 2 [default = "T"];
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // required int32 currentFighterID = 3 [default = 0];
  if (has_currentfighterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->currentfighterid(), target);
  }

  // repeated .BaseAttrProto unitAttr = 4;
  for (int i = 0; i < this->unitattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->unitattr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserInfoRecordProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userID = 1 [default = 0];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required string userName = 2 [default = "T"];
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required int32 currentFighterID = 3 [default = 0];
    if (has_currentfighterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentfighterid());
    }

  }
  // repeated .BaseAttrProto unitAttr = 4;
  total_size += 1 * this->unitattr_size();
  for (int i = 0; i < this->unitattr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unitattr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfoRecordProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfoRecordProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfoRecordProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfoRecordProto::MergeFrom(const UserInfoRecordProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  unitattr_.MergeFrom(from.unitattr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_currentfighterid()) {
      set_currentfighterid(from.currentfighterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfoRecordProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfoRecordProto::CopyFrom(const UserInfoRecordProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoRecordProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < unitattr_size(); i++) {
    if (!this->unitattr(i).IsInitialized()) return false;
  }
  return true;
}

void UserInfoRecordProto::Swap(UserInfoRecordProto* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(username_, other->username_);
    std::swap(currentfighterid_, other->currentfighterid_);
    unitattr_.Swap(&other->unitattr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfoRecordProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfoRecordProto_descriptor_;
  metadata.reflection = UserInfoRecordProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
