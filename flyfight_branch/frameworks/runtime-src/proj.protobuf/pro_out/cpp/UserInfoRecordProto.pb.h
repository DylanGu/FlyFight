// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserInfoRecordProto.proto

#ifndef PROTOBUF_UserInfoRecordProto_2eproto__INCLUDED
#define PROTOBUF_UserInfoRecordProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "BaseAttrProto.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UserInfoRecordProto_2eproto();
void protobuf_AssignDesc_UserInfoRecordProto_2eproto();
void protobuf_ShutdownFile_UserInfoRecordProto_2eproto();

class UserInfoRecordProto;

// ===================================================================

class UserInfoRecordProto : public ::google::protobuf::Message {
 public:
  UserInfoRecordProto();
  virtual ~UserInfoRecordProto();

  UserInfoRecordProto(const UserInfoRecordProto& from);

  inline UserInfoRecordProto& operator=(const UserInfoRecordProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfoRecordProto& default_instance();

  void Swap(UserInfoRecordProto* other);

  // implements Message ----------------------------------------------

  UserInfoRecordProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserInfoRecordProto& from);
  void MergeFrom(const UserInfoRecordProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 userID = 1 [default = 0];
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // required string userName = 2 [default = "T"];
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required int32 currentFighterID = 3 [default = 0];
  inline bool has_currentfighterid() const;
  inline void clear_currentfighterid();
  static const int kCurrentFighterIDFieldNumber = 3;
  inline ::google::protobuf::int32 currentfighterid() const;
  inline void set_currentfighterid(::google::protobuf::int32 value);

  // repeated .BaseAttrProto unitAttr = 4;
  inline int unitattr_size() const;
  inline void clear_unitattr();
  static const int kUnitAttrFieldNumber = 4;
  inline const ::BaseAttrProto& unitattr(int index) const;
  inline ::BaseAttrProto* mutable_unitattr(int index);
  inline ::BaseAttrProto* add_unitattr();
  inline const ::google::protobuf::RepeatedPtrField< ::BaseAttrProto >&
      unitattr() const;
  inline ::google::protobuf::RepeatedPtrField< ::BaseAttrProto >*
      mutable_unitattr();

  // @@protoc_insertion_point(class_scope:UserInfoRecordProto)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_currentfighterid();
  inline void clear_has_currentfighterid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  static ::std::string* _default_username_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 currentfighterid_;
  ::google::protobuf::RepeatedPtrField< ::BaseAttrProto > unitattr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_UserInfoRecordProto_2eproto();
  friend void protobuf_AssignDesc_UserInfoRecordProto_2eproto();
  friend void protobuf_ShutdownFile_UserInfoRecordProto_2eproto();

  void InitAsDefaultInstance();
  static UserInfoRecordProto* default_instance_;
};
// ===================================================================


// ===================================================================

// UserInfoRecordProto

// required int32 userID = 1 [default = 0];
inline bool UserInfoRecordProto::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserInfoRecordProto::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserInfoRecordProto::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserInfoRecordProto::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 UserInfoRecordProto::userid() const {
  return userid_;
}
inline void UserInfoRecordProto::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// required string userName = 2 [default = "T"];
inline bool UserInfoRecordProto::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserInfoRecordProto::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserInfoRecordProto::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserInfoRecordProto::clear_username() {
  if (username_ != _default_username_) {
    username_->assign(*_default_username_);
  }
  clear_has_username();
}
inline const ::std::string& UserInfoRecordProto::username() const {
  return *username_;
}
inline void UserInfoRecordProto::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == _default_username_) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void UserInfoRecordProto::set_username(const char* value) {
  set_has_username();
  if (username_ == _default_username_) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void UserInfoRecordProto::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == _default_username_) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfoRecordProto::mutable_username() {
  set_has_username();
  if (username_ == _default_username_) {
    username_ = new ::std::string(*_default_username_);
  }
  return username_;
}
inline ::std::string* UserInfoRecordProto::release_username() {
  clear_has_username();
  if (username_ == _default_username_) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(_default_username_);
    return temp;
  }
}
inline void UserInfoRecordProto::set_allocated_username(::std::string* username) {
  if (username_ != _default_username_) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(_default_username_);
  }
}

// required int32 currentFighterID = 3 [default = 0];
inline bool UserInfoRecordProto::has_currentfighterid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserInfoRecordProto::set_has_currentfighterid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserInfoRecordProto::clear_has_currentfighterid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserInfoRecordProto::clear_currentfighterid() {
  currentfighterid_ = 0;
  clear_has_currentfighterid();
}
inline ::google::protobuf::int32 UserInfoRecordProto::currentfighterid() const {
  return currentfighterid_;
}
inline void UserInfoRecordProto::set_currentfighterid(::google::protobuf::int32 value) {
  set_has_currentfighterid();
  currentfighterid_ = value;
}

// repeated .BaseAttrProto unitAttr = 4;
inline int UserInfoRecordProto::unitattr_size() const {
  return unitattr_.size();
}
inline void UserInfoRecordProto::clear_unitattr() {
  unitattr_.Clear();
}
inline const ::BaseAttrProto& UserInfoRecordProto::unitattr(int index) const {
  return unitattr_.Get(index);
}
inline ::BaseAttrProto* UserInfoRecordProto::mutable_unitattr(int index) {
  return unitattr_.Mutable(index);
}
inline ::BaseAttrProto* UserInfoRecordProto::add_unitattr() {
  return unitattr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BaseAttrProto >&
UserInfoRecordProto::unitattr() const {
  return unitattr_;
}
inline ::google::protobuf::RepeatedPtrField< ::BaseAttrProto >*
UserInfoRecordProto::mutable_unitattr() {
  return &unitattr_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UserInfoRecordProto_2eproto__INCLUDED
