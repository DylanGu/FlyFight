// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BaseAttr.proto

#ifndef PROTOBUF_BaseAttr_2eproto__INCLUDED
#define PROTOBUF_BaseAttr_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BaseAttr_2eproto();
void protobuf_AssignDesc_BaseAttr_2eproto();
void protobuf_ShutdownFile_BaseAttr_2eproto();

class BaseAttr;

enum BaseAttr_ePart {
  BaseAttr_ePart_kPart_Null = 0,
  BaseAttr_ePart_kPart_Fighter = 1,
  BaseAttr_ePart_kPart_Armor = 2,
  BaseAttr_ePart_kPart_Wingman = 3,
  BaseAttr_ePart_kPart_Attache = 4
};
bool BaseAttr_ePart_IsValid(int value);
const BaseAttr_ePart BaseAttr_ePart_ePart_MIN = BaseAttr_ePart_kPart_Null;
const BaseAttr_ePart BaseAttr_ePart_ePart_MAX = BaseAttr_ePart_kPart_Attache;
const int BaseAttr_ePart_ePart_ARRAYSIZE = BaseAttr_ePart_ePart_MAX + 1;

const ::google::protobuf::EnumDescriptor* BaseAttr_ePart_descriptor();
inline const ::std::string& BaseAttr_ePart_Name(BaseAttr_ePart value) {
  return ::google::protobuf::internal::NameOfEnum(
    BaseAttr_ePart_descriptor(), value);
}
inline bool BaseAttr_ePart_Parse(
    const ::std::string& name, BaseAttr_ePart* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BaseAttr_ePart>(
    BaseAttr_ePart_descriptor(), name, value);
}
enum BaseAttr_eQuality {
  BaseAttr_eQuality_kQuality_Gray = 0,
  BaseAttr_eQuality_kQuality_White = 1,
  BaseAttr_eQuality_kQuality_Green = 2,
  BaseAttr_eQuality_kQuality_Blue = 3,
  BaseAttr_eQuality_kQuality_Purple = 4,
  BaseAttr_eQuality_kQuality_Orange = 5
};
bool BaseAttr_eQuality_IsValid(int value);
const BaseAttr_eQuality BaseAttr_eQuality_eQuality_MIN = BaseAttr_eQuality_kQuality_Gray;
const BaseAttr_eQuality BaseAttr_eQuality_eQuality_MAX = BaseAttr_eQuality_kQuality_Orange;
const int BaseAttr_eQuality_eQuality_ARRAYSIZE = BaseAttr_eQuality_eQuality_MAX + 1;

const ::google::protobuf::EnumDescriptor* BaseAttr_eQuality_descriptor();
inline const ::std::string& BaseAttr_eQuality_Name(BaseAttr_eQuality value) {
  return ::google::protobuf::internal::NameOfEnum(
    BaseAttr_eQuality_descriptor(), value);
}
inline bool BaseAttr_eQuality_Parse(
    const ::std::string& name, BaseAttr_eQuality* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BaseAttr_eQuality>(
    BaseAttr_eQuality_descriptor(), name, value);
}
enum BaseAttr_eQualityRank {
  BaseAttr_eQualityRank_kQuaRank_0 = 0,
  BaseAttr_eQualityRank_kQuaRank_1 = 1,
  BaseAttr_eQualityRank_kQuaRank_2 = 2,
  BaseAttr_eQualityRank_kQuaRank_Max = 3,
  BaseAttr_eQualityRank_kQuaRank_Gold = 4
};
bool BaseAttr_eQualityRank_IsValid(int value);
const BaseAttr_eQualityRank BaseAttr_eQualityRank_eQualityRank_MIN = BaseAttr_eQualityRank_kQuaRank_0;
const BaseAttr_eQualityRank BaseAttr_eQualityRank_eQualityRank_MAX = BaseAttr_eQualityRank_kQuaRank_Gold;
const int BaseAttr_eQualityRank_eQualityRank_ARRAYSIZE = BaseAttr_eQualityRank_eQualityRank_MAX + 1;

const ::google::protobuf::EnumDescriptor* BaseAttr_eQualityRank_descriptor();
inline const ::std::string& BaseAttr_eQualityRank_Name(BaseAttr_eQualityRank value) {
  return ::google::protobuf::internal::NameOfEnum(
    BaseAttr_eQualityRank_descriptor(), value);
}
inline bool BaseAttr_eQualityRank_Parse(
    const ::std::string& name, BaseAttr_eQualityRank* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BaseAttr_eQualityRank>(
    BaseAttr_eQualityRank_descriptor(), name, value);
}
// ===================================================================

class BaseAttr : public ::google::protobuf::Message {
 public:
  BaseAttr();
  virtual ~BaseAttr();

  BaseAttr(const BaseAttr& from);

  inline BaseAttr& operator=(const BaseAttr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseAttr& default_instance();

  void Swap(BaseAttr* other);

  // implements Message ----------------------------------------------

  BaseAttr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BaseAttr& from);
  void MergeFrom(const BaseAttr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BaseAttr_ePart ePart;
  static const ePart kPart_Null = BaseAttr_ePart_kPart_Null;
  static const ePart kPart_Fighter = BaseAttr_ePart_kPart_Fighter;
  static const ePart kPart_Armor = BaseAttr_ePart_kPart_Armor;
  static const ePart kPart_Wingman = BaseAttr_ePart_kPart_Wingman;
  static const ePart kPart_Attache = BaseAttr_ePart_kPart_Attache;
  static inline bool ePart_IsValid(int value) {
    return BaseAttr_ePart_IsValid(value);
  }
  static const ePart ePart_MIN =
    BaseAttr_ePart_ePart_MIN;
  static const ePart ePart_MAX =
    BaseAttr_ePart_ePart_MAX;
  static const int ePart_ARRAYSIZE =
    BaseAttr_ePart_ePart_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ePart_descriptor() {
    return BaseAttr_ePart_descriptor();
  }
  static inline const ::std::string& ePart_Name(ePart value) {
    return BaseAttr_ePart_Name(value);
  }
  static inline bool ePart_Parse(const ::std::string& name,
      ePart* value) {
    return BaseAttr_ePart_Parse(name, value);
  }

  typedef BaseAttr_eQuality eQuality;
  static const eQuality kQuality_Gray = BaseAttr_eQuality_kQuality_Gray;
  static const eQuality kQuality_White = BaseAttr_eQuality_kQuality_White;
  static const eQuality kQuality_Green = BaseAttr_eQuality_kQuality_Green;
  static const eQuality kQuality_Blue = BaseAttr_eQuality_kQuality_Blue;
  static const eQuality kQuality_Purple = BaseAttr_eQuality_kQuality_Purple;
  static const eQuality kQuality_Orange = BaseAttr_eQuality_kQuality_Orange;
  static inline bool eQuality_IsValid(int value) {
    return BaseAttr_eQuality_IsValid(value);
  }
  static const eQuality eQuality_MIN =
    BaseAttr_eQuality_eQuality_MIN;
  static const eQuality eQuality_MAX =
    BaseAttr_eQuality_eQuality_MAX;
  static const int eQuality_ARRAYSIZE =
    BaseAttr_eQuality_eQuality_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eQuality_descriptor() {
    return BaseAttr_eQuality_descriptor();
  }
  static inline const ::std::string& eQuality_Name(eQuality value) {
    return BaseAttr_eQuality_Name(value);
  }
  static inline bool eQuality_Parse(const ::std::string& name,
      eQuality* value) {
    return BaseAttr_eQuality_Parse(name, value);
  }

  typedef BaseAttr_eQualityRank eQualityRank;
  static const eQualityRank kQuaRank_0 = BaseAttr_eQualityRank_kQuaRank_0;
  static const eQualityRank kQuaRank_1 = BaseAttr_eQualityRank_kQuaRank_1;
  static const eQualityRank kQuaRank_2 = BaseAttr_eQualityRank_kQuaRank_2;
  static const eQualityRank kQuaRank_Max = BaseAttr_eQualityRank_kQuaRank_Max;
  static const eQualityRank kQuaRank_Gold = BaseAttr_eQualityRank_kQuaRank_Gold;
  static inline bool eQualityRank_IsValid(int value) {
    return BaseAttr_eQualityRank_IsValid(value);
  }
  static const eQualityRank eQualityRank_MIN =
    BaseAttr_eQualityRank_eQualityRank_MIN;
  static const eQualityRank eQualityRank_MAX =
    BaseAttr_eQualityRank_eQualityRank_MAX;
  static const int eQualityRank_ARRAYSIZE =
    BaseAttr_eQualityRank_eQualityRank_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eQualityRank_descriptor() {
    return BaseAttr_eQualityRank_descriptor();
  }
  static inline const ::std::string& eQualityRank_Name(eQualityRank value) {
    return BaseAttr_eQualityRank_Name(value);
  }
  static inline bool eQualityRank_Parse(const ::std::string& name,
      eQualityRank* value) {
    return BaseAttr_eQualityRank_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .BaseAttr.ePart part = 1 [default = kPart_Null];
  inline bool has_part() const;
  inline void clear_part();
  static const int kPartFieldNumber = 1;
  inline ::BaseAttr_ePart part() const;
  inline void set_part(::BaseAttr_ePart value);

  // required int32 level = 2 [default = 1];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required .BaseAttr.eQuality quality = 3 [default = kQuality_White];
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 3;
  inline ::BaseAttr_eQuality quality() const;
  inline void set_quality(::BaseAttr_eQuality value);

  // required .BaseAttr.eQualityRank quaRank = 4 [default = kQuaRank_0];
  inline bool has_quarank() const;
  inline void clear_quarank();
  static const int kQuaRankFieldNumber = 4;
  inline ::BaseAttr_eQualityRank quarank() const;
  inline void set_quarank(::BaseAttr_eQualityRank value);

  // optional int32 hp = 5;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 5;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // optional int32 defence = 6;
  inline bool has_defence() const;
  inline void clear_defence();
  static const int kDefenceFieldNumber = 6;
  inline ::google::protobuf::int32 defence() const;
  inline void set_defence(::google::protobuf::int32 value);

  // optional int32 atk = 7;
  inline bool has_atk() const;
  inline void clear_atk();
  static const int kAtkFieldNumber = 7;
  inline ::google::protobuf::int32 atk() const;
  inline void set_atk(::google::protobuf::int32 value);

  // optional int32 atk_speed = 8;
  inline bool has_atk_speed() const;
  inline void clear_atk_speed();
  static const int kAtkSpeedFieldNumber = 8;
  inline ::google::protobuf::int32 atk_speed() const;
  inline void set_atk_speed(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BaseAttr)
 private:
  inline void set_has_part();
  inline void clear_has_part();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_quarank();
  inline void clear_has_quarank();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_defence();
  inline void clear_has_defence();
  inline void set_has_atk();
  inline void clear_has_atk();
  inline void set_has_atk_speed();
  inline void clear_has_atk_speed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int part_;
  ::google::protobuf::int32 level_;
  int quality_;
  int quarank_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 defence_;
  ::google::protobuf::int32 atk_;
  ::google::protobuf::int32 atk_speed_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_BaseAttr_2eproto();
  friend void protobuf_AssignDesc_BaseAttr_2eproto();
  friend void protobuf_ShutdownFile_BaseAttr_2eproto();

  void InitAsDefaultInstance();
  static BaseAttr* default_instance_;
};
// ===================================================================


// ===================================================================

// BaseAttr

// required .BaseAttr.ePart part = 1 [default = kPart_Null];
inline bool BaseAttr::has_part() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BaseAttr::set_has_part() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BaseAttr::clear_has_part() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BaseAttr::clear_part() {
  part_ = 0;
  clear_has_part();
}
inline ::BaseAttr_ePart BaseAttr::part() const {
  return static_cast< ::BaseAttr_ePart >(part_);
}
inline void BaseAttr::set_part(::BaseAttr_ePart value) {
  assert(::BaseAttr_ePart_IsValid(value));
  set_has_part();
  part_ = value;
}

// required int32 level = 2 [default = 1];
inline bool BaseAttr::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BaseAttr::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BaseAttr::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BaseAttr::clear_level() {
  level_ = 1;
  clear_has_level();
}
inline ::google::protobuf::int32 BaseAttr::level() const {
  return level_;
}
inline void BaseAttr::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required .BaseAttr.eQuality quality = 3 [default = kQuality_White];
inline bool BaseAttr::has_quality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BaseAttr::set_has_quality() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BaseAttr::clear_has_quality() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BaseAttr::clear_quality() {
  quality_ = 1;
  clear_has_quality();
}
inline ::BaseAttr_eQuality BaseAttr::quality() const {
  return static_cast< ::BaseAttr_eQuality >(quality_);
}
inline void BaseAttr::set_quality(::BaseAttr_eQuality value) {
  assert(::BaseAttr_eQuality_IsValid(value));
  set_has_quality();
  quality_ = value;
}

// required .BaseAttr.eQualityRank quaRank = 4 [default = kQuaRank_0];
inline bool BaseAttr::has_quarank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BaseAttr::set_has_quarank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BaseAttr::clear_has_quarank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BaseAttr::clear_quarank() {
  quarank_ = 0;
  clear_has_quarank();
}
inline ::BaseAttr_eQualityRank BaseAttr::quarank() const {
  return static_cast< ::BaseAttr_eQualityRank >(quarank_);
}
inline void BaseAttr::set_quarank(::BaseAttr_eQualityRank value) {
  assert(::BaseAttr_eQualityRank_IsValid(value));
  set_has_quarank();
  quarank_ = value;
}

// optional int32 hp = 5;
inline bool BaseAttr::has_hp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BaseAttr::set_has_hp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BaseAttr::clear_has_hp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BaseAttr::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 BaseAttr::hp() const {
  return hp_;
}
inline void BaseAttr::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// optional int32 defence = 6;
inline bool BaseAttr::has_defence() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BaseAttr::set_has_defence() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BaseAttr::clear_has_defence() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BaseAttr::clear_defence() {
  defence_ = 0;
  clear_has_defence();
}
inline ::google::protobuf::int32 BaseAttr::defence() const {
  return defence_;
}
inline void BaseAttr::set_defence(::google::protobuf::int32 value) {
  set_has_defence();
  defence_ = value;
}

// optional int32 atk = 7;
inline bool BaseAttr::has_atk() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BaseAttr::set_has_atk() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BaseAttr::clear_has_atk() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BaseAttr::clear_atk() {
  atk_ = 0;
  clear_has_atk();
}
inline ::google::protobuf::int32 BaseAttr::atk() const {
  return atk_;
}
inline void BaseAttr::set_atk(::google::protobuf::int32 value) {
  set_has_atk();
  atk_ = value;
}

// optional int32 atk_speed = 8;
inline bool BaseAttr::has_atk_speed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BaseAttr::set_has_atk_speed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BaseAttr::clear_has_atk_speed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BaseAttr::clear_atk_speed() {
  atk_speed_ = 0;
  clear_has_atk_speed();
}
inline ::google::protobuf::int32 BaseAttr::atk_speed() const {
  return atk_speed_;
}
inline void BaseAttr::set_atk_speed(::google::protobuf::int32 value) {
  set_has_atk_speed();
  atk_speed_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BaseAttr_ePart>() {
  return ::BaseAttr_ePart_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BaseAttr_eQuality>() {
  return ::BaseAttr_eQuality_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BaseAttr_eQualityRank>() {
  return ::BaseAttr_eQualityRank_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BaseAttr_2eproto__INCLUDED
