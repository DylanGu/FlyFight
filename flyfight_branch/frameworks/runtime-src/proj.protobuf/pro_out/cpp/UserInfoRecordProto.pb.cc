// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserInfoRecordProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UserInfoRecordProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace snowcold {

namespace {

const ::google::protobuf::Descriptor* BaseAttrProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseAttrProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BaseAttrProto_ePart_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BaseAttrProto_eQuality_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BaseAttrProto_eQualityRank_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UserInfoRecordProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfoRecordProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_UserInfoRecordProto_2eproto() {
  protobuf_AddDesc_UserInfoRecordProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "UserInfoRecordProto.proto");
  GOOGLE_CHECK(file != NULL);
  BaseAttrProto_descriptor_ = file->message_type(0);
  static const int BaseAttrProto_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrProto, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrProto, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrProto, part_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrProto, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrProto, quarank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrProto, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrProto, defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrProto, atk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrProto, atkspeed_),
  };
  BaseAttrProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaseAttrProto_descriptor_,
      BaseAttrProto::default_instance_,
      BaseAttrProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaseAttrProto));
  BaseAttrProto_ePart_descriptor_ = BaseAttrProto_descriptor_->enum_type(0);
  BaseAttrProto_eQuality_descriptor_ = BaseAttrProto_descriptor_->enum_type(1);
  BaseAttrProto_eQualityRank_descriptor_ = BaseAttrProto_descriptor_->enum_type(2);
  UserInfoRecordProto_descriptor_ = file->message_type(1);
  static const int UserInfoRecordProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoRecordProto, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoRecordProto, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoRecordProto, currentfighterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoRecordProto, unitattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoRecordProto, testname_),
  };
  UserInfoRecordProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfoRecordProto_descriptor_,
      UserInfoRecordProto::default_instance_,
      UserInfoRecordProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoRecordProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoRecordProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfoRecordProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_UserInfoRecordProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaseAttrProto_descriptor_, &BaseAttrProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfoRecordProto_descriptor_, &UserInfoRecordProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_UserInfoRecordProto_2eproto() {
  delete BaseAttrProto::default_instance_;
  delete BaseAttrProto_reflection_;
  delete UserInfoRecordProto::default_instance_;
  delete UserInfoRecordProto_reflection_;
  delete UserInfoRecordProto::_default_username_;
}

void protobuf_AddDesc_UserInfoRecordProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031UserInfoRecordProto.proto\022\010snowcold\"\211\005"
    "\n\rBaseAttrProto\022\016\n\003sid\030\001 \002(\005:\0010\022\016\n\003eid\030\002"
    " \002(\005:\0010\0227\n\004part\030\003 \002(\0162\035.snowcold.BaseAtt"
    "rProto.ePart:\nkPart_Null\022\020\n\005level\030\004 \002(\005:"
    "\0011\022A\n\007quality\030\005 \002(\0162 .snowcold.BaseAttrP"
    "roto.eQuality:\016kQuality_White\022A\n\007quaRank"
    "\030\006 \002(\0162$.snowcold.BaseAttrProto.eQuality"
    "Rank:\nkQuaRank_0\022\n\n\002hp\030\007 \001(\005\022\017\n\007defence\030"
    "\010 \001(\005\022\013\n\003atk\030\t \001(\005\022\020\n\010atkSpeed\030\n \001(\005\"a\n\005"
    "ePart\022\016\n\nkPart_Null\020\000\022\021\n\rkPart_Fighter\020\001"
    "\022\017\n\013kPart_Armor\020\002\022\021\n\rkPart_Wingman\020\003\022\021\n\r"
    "kPart_Attache\020\004\"\202\001\n\010eQuality\022\021\n\rkQuality"
    "_Gray\020\000\022\022\n\016kQuality_White\020\001\022\022\n\016kQuality_"
    "Green\020\002\022\021\n\rkQuality_Blue\020\003\022\023\n\017kQuality_P"
    "urple\020\004\022\023\n\017kQuality_Orange\020\005\"c\n\014eQuality"
    "Rank\022\016\n\nkQuaRank_0\020\000\022\016\n\nkQuaRank_1\020\001\022\016\n\n"
    "kQuaRank_2\020\002\022\020\n\014kQuaRank_Max\020\003\022\021\n\rkQuaRa"
    "nk_Gold\020\004\"\227\001\n\023UserInfoRecordProto\022\021\n\006use"
    "rID\030\001 \002(\005:\0010\022\023\n\010userName\030\002 \002(\t:\001T\022\033\n\020cur"
    "rentFighterID\030\003 \002(\005:\0010\022)\n\010unitAttr\030\004 \003(\013"
    "2\027.snowcold.BaseAttrProto\022\020\n\010testName\030\005 "
    "\003(\tB\002H\001", 847);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UserInfoRecordProto.proto", &protobuf_RegisterTypes);
  BaseAttrProto::default_instance_ = new BaseAttrProto();
  UserInfoRecordProto::_default_username_ =
      new ::std::string("T", 1);
  UserInfoRecordProto::default_instance_ = new UserInfoRecordProto();
  BaseAttrProto::default_instance_->InitAsDefaultInstance();
  UserInfoRecordProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UserInfoRecordProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UserInfoRecordProto_2eproto {
  StaticDescriptorInitializer_UserInfoRecordProto_2eproto() {
    protobuf_AddDesc_UserInfoRecordProto_2eproto();
  }
} static_descriptor_initializer_UserInfoRecordProto_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* BaseAttrProto_ePart_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseAttrProto_ePart_descriptor_;
}
bool BaseAttrProto_ePart_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BaseAttrProto_ePart BaseAttrProto::kPart_Null;
const BaseAttrProto_ePart BaseAttrProto::kPart_Fighter;
const BaseAttrProto_ePart BaseAttrProto::kPart_Armor;
const BaseAttrProto_ePart BaseAttrProto::kPart_Wingman;
const BaseAttrProto_ePart BaseAttrProto::kPart_Attache;
const BaseAttrProto_ePart BaseAttrProto::ePart_MIN;
const BaseAttrProto_ePart BaseAttrProto::ePart_MAX;
const int BaseAttrProto::ePart_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BaseAttrProto_eQuality_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseAttrProto_eQuality_descriptor_;
}
bool BaseAttrProto_eQuality_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BaseAttrProto_eQuality BaseAttrProto::kQuality_Gray;
const BaseAttrProto_eQuality BaseAttrProto::kQuality_White;
const BaseAttrProto_eQuality BaseAttrProto::kQuality_Green;
const BaseAttrProto_eQuality BaseAttrProto::kQuality_Blue;
const BaseAttrProto_eQuality BaseAttrProto::kQuality_Purple;
const BaseAttrProto_eQuality BaseAttrProto::kQuality_Orange;
const BaseAttrProto_eQuality BaseAttrProto::eQuality_MIN;
const BaseAttrProto_eQuality BaseAttrProto::eQuality_MAX;
const int BaseAttrProto::eQuality_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BaseAttrProto_eQualityRank_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseAttrProto_eQualityRank_descriptor_;
}
bool BaseAttrProto_eQualityRank_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BaseAttrProto_eQualityRank BaseAttrProto::kQuaRank_0;
const BaseAttrProto_eQualityRank BaseAttrProto::kQuaRank_1;
const BaseAttrProto_eQualityRank BaseAttrProto::kQuaRank_2;
const BaseAttrProto_eQualityRank BaseAttrProto::kQuaRank_Max;
const BaseAttrProto_eQualityRank BaseAttrProto::kQuaRank_Gold;
const BaseAttrProto_eQualityRank BaseAttrProto::eQualityRank_MIN;
const BaseAttrProto_eQualityRank BaseAttrProto::eQualityRank_MAX;
const int BaseAttrProto::eQualityRank_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BaseAttrProto::kSidFieldNumber;
const int BaseAttrProto::kEidFieldNumber;
const int BaseAttrProto::kPartFieldNumber;
const int BaseAttrProto::kLevelFieldNumber;
const int BaseAttrProto::kQualityFieldNumber;
const int BaseAttrProto::kQuaRankFieldNumber;
const int BaseAttrProto::kHpFieldNumber;
const int BaseAttrProto::kDefenceFieldNumber;
const int BaseAttrProto::kAtkFieldNumber;
const int BaseAttrProto::kAtkSpeedFieldNumber;
#endif  // !_MSC_VER

BaseAttrProto::BaseAttrProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BaseAttrProto::InitAsDefaultInstance() {
}

BaseAttrProto::BaseAttrProto(const BaseAttrProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BaseAttrProto::SharedCtor() {
  _cached_size_ = 0;
  sid_ = 0;
  eid_ = 0;
  part_ = 0;
  level_ = 1;
  quality_ = 1;
  quarank_ = 0;
  hp_ = 0;
  defence_ = 0;
  atk_ = 0;
  atkspeed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseAttrProto::~BaseAttrProto() {
  SharedDtor();
}

void BaseAttrProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BaseAttrProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseAttrProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseAttrProto_descriptor_;
}

const BaseAttrProto& BaseAttrProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserInfoRecordProto_2eproto();
  return *default_instance_;
}

BaseAttrProto* BaseAttrProto::default_instance_ = NULL;

BaseAttrProto* BaseAttrProto::New() const {
  return new BaseAttrProto;
}

void BaseAttrProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sid_ = 0;
    eid_ = 0;
    part_ = 0;
    level_ = 1;
    quality_ = 1;
    quarank_ = 0;
    hp_ = 0;
    defence_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    atk_ = 0;
    atkspeed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaseAttrProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eid;
        break;
      }

      // required int32 eid = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_part;
        break;
      }

      // required .snowcold.BaseAttrProto.ePart part = 3 [default = kPart_Null];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_part:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::snowcold::BaseAttrProto_ePart_IsValid(value)) {
            set_part(static_cast< ::snowcold::BaseAttrProto_ePart >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required int32 level = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_quality;
        break;
      }

      // required .snowcold.BaseAttrProto.eQuality quality = 5 [default = kQuality_White];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::snowcold::BaseAttrProto_eQuality_IsValid(value)) {
            set_quality(static_cast< ::snowcold::BaseAttrProto_eQuality >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_quaRank;
        break;
      }

      // required .snowcold.BaseAttrProto.eQualityRank quaRank = 6 [default = kQuaRank_0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quaRank:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::snowcold::BaseAttrProto_eQualityRank_IsValid(value)) {
            set_quarank(static_cast< ::snowcold::BaseAttrProto_eQualityRank >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hp;
        break;
      }

      // optional int32 hp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_defence;
        break;
      }

      // optional int32 defence = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defence_)));
          set_has_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_atk;
        break;
      }

      // optional int32 atk = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atk_)));
          set_has_atk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_atkSpeed;
        break;
      }

      // optional int32 atkSpeed = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atkSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atkspeed_)));
          set_has_atkspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BaseAttrProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sid = 1 [default = 0];
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sid(), output);
  }

  // required int32 eid = 2 [default = 0];
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->eid(), output);
  }

  // required .snowcold.BaseAttrProto.ePart part = 3 [default = kPart_Null];
  if (has_part()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->part(), output);
  }

  // required int32 level = 4 [default = 1];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // required .snowcold.BaseAttrProto.eQuality quality = 5 [default = kQuality_White];
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->quality(), output);
  }

  // required .snowcold.BaseAttrProto.eQualityRank quaRank = 6 [default = kQuaRank_0];
  if (has_quarank()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->quarank(), output);
  }

  // optional int32 hp = 7;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hp(), output);
  }

  // optional int32 defence = 8;
  if (has_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->defence(), output);
  }

  // optional int32 atk = 9;
  if (has_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->atk(), output);
  }

  // optional int32 atkSpeed = 10;
  if (has_atkspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->atkspeed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BaseAttrProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sid = 1 [default = 0];
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sid(), target);
  }

  // required int32 eid = 2 [default = 0];
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->eid(), target);
  }

  // required .snowcold.BaseAttrProto.ePart part = 3 [default = kPart_Null];
  if (has_part()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->part(), target);
  }

  // required int32 level = 4 [default = 1];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // required .snowcold.BaseAttrProto.eQuality quality = 5 [default = kQuality_White];
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->quality(), target);
  }

  // required .snowcold.BaseAttrProto.eQualityRank quaRank = 6 [default = kQuaRank_0];
  if (has_quarank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->quarank(), target);
  }

  // optional int32 hp = 7;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hp(), target);
  }

  // optional int32 defence = 8;
  if (has_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->defence(), target);
  }

  // optional int32 atk = 9;
  if (has_atk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->atk(), target);
  }

  // optional int32 atkSpeed = 10;
  if (has_atkspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->atkspeed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BaseAttrProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sid = 1 [default = 0];
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

    // required int32 eid = 2 [default = 0];
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eid());
    }

    // required .snowcold.BaseAttrProto.ePart part = 3 [default = kPart_Null];
    if (has_part()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->part());
    }

    // required int32 level = 4 [default = 1];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required .snowcold.BaseAttrProto.eQuality quality = 5 [default = kQuality_White];
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->quality());
    }

    // required .snowcold.BaseAttrProto.eQualityRank quaRank = 6 [default = kQuaRank_0];
    if (has_quarank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->quarank());
    }

    // optional int32 hp = 7;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 defence = 8;
    if (has_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defence());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 atk = 9;
    if (has_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atk());
    }

    // optional int32 atkSpeed = 10;
    if (has_atkspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atkspeed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseAttrProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaseAttrProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaseAttrProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaseAttrProto::MergeFrom(const BaseAttrProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
    if (from.has_part()) {
      set_part(from.part());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_quarank()) {
      set_quarank(from.quarank());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_defence()) {
      set_defence(from.defence());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_atk()) {
      set_atk(from.atk());
    }
    if (from.has_atkspeed()) {
      set_atkspeed(from.atkspeed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaseAttrProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseAttrProto::CopyFrom(const BaseAttrProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseAttrProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void BaseAttrProto::Swap(BaseAttrProto* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(eid_, other->eid_);
    std::swap(part_, other->part_);
    std::swap(level_, other->level_);
    std::swap(quality_, other->quality_);
    std::swap(quarank_, other->quarank_);
    std::swap(hp_, other->hp_);
    std::swap(defence_, other->defence_);
    std::swap(atk_, other->atk_);
    std::swap(atkspeed_, other->atkspeed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaseAttrProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseAttrProto_descriptor_;
  metadata.reflection = BaseAttrProto_reflection_;
  return metadata;
}


// ===================================================================

::std::string* UserInfoRecordProto::_default_username_ = NULL;
#ifndef _MSC_VER
const int UserInfoRecordProto::kUserIDFieldNumber;
const int UserInfoRecordProto::kUserNameFieldNumber;
const int UserInfoRecordProto::kCurrentFighterIDFieldNumber;
const int UserInfoRecordProto::kUnitAttrFieldNumber;
const int UserInfoRecordProto::kTestNameFieldNumber;
#endif  // !_MSC_VER

UserInfoRecordProto::UserInfoRecordProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserInfoRecordProto::InitAsDefaultInstance() {
}

UserInfoRecordProto::UserInfoRecordProto(const UserInfoRecordProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserInfoRecordProto::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  username_ = const_cast< ::std::string*>(_default_username_);
  currentfighterid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfoRecordProto::~UserInfoRecordProto() {
  SharedDtor();
}

void UserInfoRecordProto::SharedDtor() {
  if (username_ != _default_username_) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void UserInfoRecordProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfoRecordProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfoRecordProto_descriptor_;
}

const UserInfoRecordProto& UserInfoRecordProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserInfoRecordProto_2eproto();
  return *default_instance_;
}

UserInfoRecordProto* UserInfoRecordProto::default_instance_ = NULL;

UserInfoRecordProto* UserInfoRecordProto::New() const {
  return new UserInfoRecordProto;
}

void UserInfoRecordProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    if (has_username()) {
      if (username_ != _default_username_) {
        username_->assign(*_default_username_);
      }
    }
    currentfighterid_ = 0;
  }
  unitattr_.Clear();
  testname_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfoRecordProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userName;
        break;
      }

      // required string userName = 2 [default = "T"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_currentFighterID;
        break;
      }

      // required int32 currentFighterID = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentFighterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentfighterid_)));
          set_has_currentfighterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_unitAttr;
        break;
      }

      // repeated .snowcold.BaseAttrProto unitAttr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unitattr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_unitAttr;
        if (input->ExpectTag(42)) goto parse_testName;
        break;
      }

      // repeated string testName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_testName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_testname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->testname(this->testname_size() - 1).data(),
            this->testname(this->testname_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_testName;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInfoRecordProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 userID = 1 [default = 0];
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // required string userName = 2 [default = "T"];
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }

  // required int32 currentFighterID = 3 [default = 0];
  if (has_currentfighterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->currentfighterid(), output);
  }

  // repeated .snowcold.BaseAttrProto unitAttr = 4;
  for (int i = 0; i < this->unitattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->unitattr(i), output);
  }

  // repeated string testName = 5;
  for (int i = 0; i < this->testname_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->testname(i).data(), this->testname(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->testname(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserInfoRecordProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 userID = 1 [default = 0];
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // required string userName = 2 [default = "T"];
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // required int32 currentFighterID = 3 [default = 0];
  if (has_currentfighterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->currentfighterid(), target);
  }

  // repeated .snowcold.BaseAttrProto unitAttr = 4;
  for (int i = 0; i < this->unitattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->unitattr(i), target);
  }

  // repeated string testName = 5;
  for (int i = 0; i < this->testname_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->testname(i).data(), this->testname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->testname(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserInfoRecordProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userID = 1 [default = 0];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required string userName = 2 [default = "T"];
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required int32 currentFighterID = 3 [default = 0];
    if (has_currentfighterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentfighterid());
    }

  }
  // repeated .snowcold.BaseAttrProto unitAttr = 4;
  total_size += 1 * this->unitattr_size();
  for (int i = 0; i < this->unitattr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unitattr(i));
  }

  // repeated string testName = 5;
  total_size += 1 * this->testname_size();
  for (int i = 0; i < this->testname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->testname(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfoRecordProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfoRecordProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfoRecordProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfoRecordProto::MergeFrom(const UserInfoRecordProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  unitattr_.MergeFrom(from.unitattr_);
  testname_.MergeFrom(from.testname_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_currentfighterid()) {
      set_currentfighterid(from.currentfighterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfoRecordProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfoRecordProto::CopyFrom(const UserInfoRecordProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoRecordProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < unitattr_size(); i++) {
    if (!this->unitattr(i).IsInitialized()) return false;
  }
  return true;
}

void UserInfoRecordProto::Swap(UserInfoRecordProto* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(username_, other->username_);
    std::swap(currentfighterid_, other->currentfighterid_);
    unitattr_.Swap(&other->unitattr_);
    testname_.Swap(&other->testname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfoRecordProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfoRecordProto_descriptor_;
  metadata.reflection = UserInfoRecordProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace snowcold

// @@protoc_insertion_point(global_scope)
